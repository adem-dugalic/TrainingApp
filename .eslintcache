[{"D:\\from ssd\\GitHub\\TrainingApp\\src\\index.tsx":"1","D:\\from ssd\\GitHub\\TrainingApp\\src\\App.tsx":"2","D:\\from ssd\\GitHub\\TrainingApp\\src\\Components\\Bar.tsx":"3","D:\\from ssd\\GitHub\\TrainingApp\\src\\Components\\Drawer.tsx":"4","D:\\from ssd\\GitHub\\TrainingApp\\src\\Components\\Coursetable.tsx":"5","D:\\from ssd\\GitHub\\TrainingApp\\src\\Components\\Register.tsx":"6","D:\\from ssd\\GitHub\\TrainingApp\\src\\Components\\Login.tsx":"7","D:\\from ssd\\GitHub\\TrainingApp\\src\\Components\\AllCoursesTable.tsx":"8","D:\\from ssd\\GitHub\\TrainingApp\\src\\Views\\MyCourses.tsx":"9","D:\\from ssd\\GitHub\\TrainingApp\\src\\Views\\AllCourses.tsx":"10","D:\\from ssd\\GitHub\\TrainingApp\\src\\Views\\Home.tsx":"11","D:\\from ssd\\GitHub\\TrainingApp\\src\\Components\\Welcome.tsx":"12","D:\\from ssd\\GitHub\\TrainingApp\\src\\Components\\FetchAllCourses.tsx":"13"},{"size":219,"mtime":1608033290951,"results":"14","hashOfConfig":"15"},{"size":1153,"mtime":1608033272571,"results":"16","hashOfConfig":"15"},{"size":3463,"mtime":1608035890657,"results":"17","hashOfConfig":"15"},{"size":6473,"mtime":1608034139157,"results":"18","hashOfConfig":"15"},{"size":4907,"mtime":1608022993356,"results":"19","hashOfConfig":"15"},{"size":4008,"mtime":1608022961137,"results":"20","hashOfConfig":"15"},{"size":3943,"mtime":1608023001344,"results":"21","hashOfConfig":"15"},{"size":4426,"mtime":1608037803365,"results":"22","hashOfConfig":"15"},{"size":764,"mtime":1608034367199,"results":"23","hashOfConfig":"15"},{"size":728,"mtime":1608034353410,"results":"24","hashOfConfig":"15"},{"size":1145,"mtime":1608034756478,"results":"25","hashOfConfig":"15"},{"size":226,"mtime":1608029314008,"results":"26","hashOfConfig":"15"},{"size":497,"mtime":1608037357452,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1tfmndk",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\from ssd\\GitHub\\TrainingApp\\src\\index.tsx",[],["61","62"],"D:\\from ssd\\GitHub\\TrainingApp\\src\\App.tsx",[],"D:\\from ssd\\GitHub\\TrainingApp\\src\\Components\\Bar.tsx",["63","64"],"import React, { useState } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport {\r\n  makeStyles,\r\n  useTheme,\r\n  Theme,\r\n  createStyles,\r\n  fade,\r\n} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: \"flex\",\r\n    },\r\n    appBar: {\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: \"100%\",\r\n      },\r\n      backgroundColor: \"#292626\",\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        display: \"none\",\r\n      },\r\n    },\r\n    search: {\r\n      position: \"relative\",\r\n      borderRadius: theme.shape.borderRadius,\r\n      backgroundColor: fade(theme.palette.common.white, 0.15),\r\n      \"&:hover\": {\r\n        backgroundColor: fade(theme.palette.common.white, 0.25),\r\n      },\r\n      marginRight: theme.spacing(2),\r\n      marginLeft: 0,\r\n      width: \"100%\",\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        marginLeft: theme.spacing(5),\r\n        width: \"50%\",\r\n      },\r\n    },\r\n    searchIcon: {\r\n      padding: theme.spacing(0, 2),\r\n      height: \"100%\",\r\n      position: \"absolute\",\r\n      pointerEvents: \"none\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n    },\r\n    inputRoot: {\r\n      color: \"inherit\",\r\n    },\r\n    inputInput: {\r\n      padding: theme.spacing(1, 1, 1, 0),\r\n      // vertical padding + font size from searchIcon\r\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n      transition: theme.transitions.create(\"width\"),\r\n      width: \"100%\",\r\n      [theme.breakpoints.up(\"md\")]: {\r\n        width: \"20ch\",\r\n      },\r\n    },\r\n    sectionDesktop: {\r\n      display: \"none\",\r\n      [theme.breakpoints.up(\"md\")]: {\r\n        display: \"flex\",\r\n      },\r\n    },\r\n    sectionMobile: {\r\n      display: \"flex\",\r\n      [theme.breakpoints.up(\"md\")]: {\r\n        display: \"none\",\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\ninterface Mobile {\r\n  setMobileOpen: Function;\r\n  mobileOpen: boolean;\r\n}\r\n\r\nexport default function Bar(props: Mobile) {\r\n  const classes = useStyles();\r\n  const mobile = props.mobileOpen;\r\n  // const [customS, setCustomS] = React.useState('classes.noShow');\r\n\r\n  const handleDrawerToggle = () => {\r\n    props.setMobileOpen(!mobile);\r\n  };\r\n  return (\r\n    <AppBar position=\"static\" className={classes.appBar}>\r\n      <Toolbar>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-label=\"open drawer\"\r\n          edge=\"start\"\r\n          onClick={handleDrawerToggle}\r\n          className={classes.menuButton}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h6\" noWrap>\r\n          IUS pre-registration system\r\n        </Typography>\r\n        <div className={classes.search}>\r\n          <div className={classes.searchIcon}>\r\n            <SearchIcon />\r\n          </div>\r\n          <InputBase\r\n            placeholder=\"Searchâ€¦\"\r\n            classes={{\r\n              root: classes.inputRoot,\r\n              input: classes.inputInput,\r\n            }}\r\n            inputProps={{ \"aria-label\": \"search\" }}\r\n          />\r\n        </div>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","D:\\from ssd\\GitHub\\TrainingApp\\src\\Components\\Drawer.tsx",["65","66"],"import React from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport Schedule from \"@material-ui/icons/Schedule\";\r\nimport ExitToApp from \"@material-ui/icons/ExitToApp\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport AddCircle from \"@material-ui/icons/AddCircle\";\r\nimport Home from \"@material-ui/icons/Home\";\r\nimport {\r\n  makeStyles,\r\n  useTheme,\r\n  Theme,\r\n  createStyles,\r\n} from \"@material-ui/core/styles\";\r\n\r\nimport \"../css/style.css\";\r\nimport Logo from \"../img/IUSlogo2.png\";\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nimport Cookie from \"js-cookie\";\r\n\r\nconst drawerWidth = 200;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: \"flex\",\r\n    },\r\n    drawer: {\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n      },\r\n    },\r\n    appBar: {\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n      },\r\n      backgroundColor: \"#292626\",\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        display: \"none\",\r\n      },\r\n    },\r\n    specialDivider: {\r\n      marginTop: \"5%\",\r\n      background: \"#999\",\r\n    },\r\n    drawerInnerLayout: {\r\n      justifyContent: \"space-between\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      height: \"80%\",\r\n    },\r\n    // necessary for content to be below app bar\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n      borderRight: \"none\",\r\n      backgroundColor: \"#292626\",\r\n      color: \"#fff\",\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n    },\r\n    maximised: {\r\n      height: \"100%\",\r\n      position: \"relative\",\r\n    },\r\n    blueGrad: {\r\n      background:\r\n        \"linear-gradient(90deg, rgba(6, 125, 233, 0.9110994739692753) 0%, rgba(1, 169, 250, 0.9251050762101716) 100%)\",\r\n      height: \"20%\",\r\n    },\r\n    iconColor: {\r\n      color: \"#fff\",\r\n    },\r\n  })\r\n);\r\n\r\ninterface DrawerProps {\r\n  mobileOpenFunction: Function;\r\n  mobileOpen: boolean;\r\n}\r\n\r\nexport default function ResponsiveDrawer(props: DrawerProps) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const mobile = props.mobileOpen;\r\n\r\n  const handleDrawerToggle = () => {\r\n    props.mobileOpenFunction(!mobile);\r\n  };\r\n\r\n  const drawer = (\r\n    <div className={classes.maximised}>\r\n      <div className={classes.blueGrad}>\r\n        <div className=\"logo\">\r\n          <img className=\"ius\" src={Logo} />\r\n          <span\r\n            className=\"user\"\r\n            dangerouslySetInnerHTML={{\r\n              __html: Cookie.get(\"name\") + \" \" + Cookie.get(\"surname\"),\r\n            }}\r\n          ></span>\r\n        </div>\r\n        <div className={classes.toolbar} />\r\n      </div>\r\n      <div className={classes.drawerInnerLayout}>\r\n        <div>\r\n          <Divider />\r\n          <List>\r\n            {/*Home*/}\r\n            <ListItem button key=\"Home\">\r\n              <ListItemIcon>\r\n                <Home className={classes.iconColor} />\r\n              </ListItemIcon>\r\n              <Link\r\n                className=\"link\"\r\n                to=\"/Home\"\r\n                onClick={() => props.mobileOpenFunction(false)}\r\n              >\r\n                <ListItemText primary=\"Home\" />\r\n              </Link>\r\n            </ListItem>\r\n            {/*Add Courses*/}\r\n            <ListItem button key=\"Add Courses\">\r\n              <ListItemIcon>\r\n                <AddCircle className={classes.iconColor} />\r\n              </ListItemIcon>\r\n              <Link\r\n                className=\"link\"\r\n                to=\"/AllCourses\"\r\n                onClick={() => props.mobileOpenFunction(false)}\r\n              >\r\n                <ListItemText primary=\"Add Courses\" />\r\n              </Link>\r\n            </ListItem>\r\n            {/*My Courses*/}\r\n            <ListItem button key=\"My Courses\">\r\n              <ListItemIcon>\r\n                <InboxIcon className={classes.iconColor} />\r\n              </ListItemIcon>\r\n              <Link\r\n                className=\"link\"\r\n                to=\"/MyCourses\"\r\n                onClick={() => props.mobileOpenFunction(false)}\r\n              >\r\n                <ListItemText primary=\"My Courses\" />\r\n              </Link>\r\n            </ListItem>\r\n            {/*Schedule*/}\r\n            <ListItem button key=\"Schedule\">\r\n              <ListItemIcon>\r\n                <Schedule className={classes.iconColor} />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Schedule\" />\r\n            </ListItem>\r\n          </List>\r\n        </div>\r\n        <div>\r\n          <Divider className={classes.specialDivider} />\r\n          <List>\r\n            <ListItem button key=\"LogOut\">\r\n              <ListItemIcon>\r\n                <ExitToApp className={classes.iconColor} />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"LogOut\" />\r\n            </ListItem>\r\n          </List>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\r\n            open={mobile}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n","D:\\from ssd\\GitHub\\TrainingApp\\src\\Components\\Coursetable.tsx",["67","68"],"import React, { useState } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\n\r\ninterface Column {\r\n  id: \"name\" | \"code\" | \"population\" | \"size\" | \"density\";\r\n  label: string;\r\n  minWidth?: number;\r\n  align?: \"right\";\r\n  format?: (value: number) => string;\r\n}\r\n\r\nconst columns: Column[] = [\r\n  { id: \"name\", label: \"Name\", minWidth: 170 },\r\n  { id: \"code\", label: \"ISO\\u00a0Code\", minWidth: 100 },\r\n  {\r\n    id: \"population\",\r\n    label: \"Population\",\r\n    minWidth: 170,\r\n    align: \"right\",\r\n    format: (value: number) => value.toLocaleString(\"en-US\"),\r\n  },\r\n  {\r\n    id: \"size\",\r\n    label: \"Size\\u00a0(km\\u00b2)\",\r\n    minWidth: 170,\r\n    align: \"right\",\r\n    format: (value: number) => value.toLocaleString(\"en-US\"),\r\n  },\r\n  {\r\n    id: \"density\",\r\n    label: \"Density\",\r\n    minWidth: 170,\r\n    align: \"right\",\r\n    format: (value: number) => value.toFixed(2),\r\n  },\r\n];\r\n\r\ninterface Data {\r\n  name: string;\r\n  code: string;\r\n  population: number;\r\n  size: number;\r\n  density: number;\r\n}\r\n\r\nfunction createData(\r\n  name: string,\r\n  code: string,\r\n  population: number,\r\n  size: number\r\n): Data {\r\n  const density = population / size;\r\n  return { name, code, population, size, density };\r\n}\r\n\r\nconst rows = [\r\n  createData(\"India\", \"IN\", 1324171354, 3287263),\r\n  createData(\"China\", \"CN\", 1403500365, 9596961),\r\n  createData(\"Italy\", \"IT\", 60483973, 301340),\r\n  createData(\"United States\", \"US\", 327167434, 9833520),\r\n  createData(\"Canada\", \"CA\", 37602103, 9984670),\r\n  createData(\"Australia\", \"AU\", 25475400, 7692024),\r\n  createData(\"Germany\", \"DE\", 83019200, 357578),\r\n  createData(\"Ireland\", \"IE\", 4857000, 70273),\r\n  createData(\"Mexico\", \"MX\", 126577691, 1972550),\r\n  createData(\"Japan\", \"JP\", 126317000, 377973),\r\n  createData(\"France\", \"FR\", 67022000, 640679),\r\n  createData(\"United Kingdom\", \"GB\", 67545757, 242495),\r\n  createData(\"Russia\", \"RU\", 146793744, 17098246),\r\n  createData(\"Nigeria\", \"NG\", 200962417, 923768),\r\n  createData(\"Brazil\", \"BR\", 210147125, 8515767),\r\n];\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n  TableHead: {\r\n    backgroundColor: \"#292626\",\r\n    color: \"#fff\",\r\n  },\r\n});\r\n\r\nexport default function Coursetable() {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  className={classes.TableHead}\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row) => {\r\n                return (\r\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                    {columns.map((column) => {\r\n                      const value = row[column.id];\r\n                      return (\r\n                        <TableCell key={column.id} align={column.align}>\r\n                          {column.format && typeof value === \"number\"\r\n                            ? column.format(value)\r\n                            : value}\r\n                        </TableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n","D:\\from ssd\\GitHub\\TrainingApp\\src\\Components\\Register.tsx",["69","70"],"import React from \"react\";\r\nimport Logo from \"../img/IUSlogo2.png\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link } from \"react-router-dom\";\r\n// import { useQuery, QueryCache, ReactQueryCacheProvider } from 'react-query';\r\nimport axios from \"axios\";\r\n\r\nimport \"../css/custom.css\";\r\nimport \"../css/main.css\";\r\nimport \"../css/util.css\";\r\n\r\ninterface RegisterProps {\r\n  userID?: string;\r\n  password?: string;\r\n  ConfirmPassword?: string;\r\n}\r\n\r\nexport const Register: React.FC<RegisterProps> = ({}) => {\r\n  const { register, handleSubmit } = useForm<RegisterProps>();\r\n\r\n  const onSubmit = (data: RegisterProps) => {\r\n    console.log(data);\r\n\r\n    if (data.ConfirmPassword !== data.password) {\r\n      alert(\"Error\");\r\n      window.location.href = \"/register\";\r\n      return;\r\n    }\r\n\r\n    const newUser = {\r\n      userID: data.userID,\r\n      password: data.password,\r\n    };\r\n\r\n    axios\r\n      .post(\"http://localhost:5000/users/signup\", newUser)\r\n      .then(() => {\r\n        console.log(\"Success\");\r\n        window.location.href = \"/\";\r\n      })\r\n      .catch((err) => alert(\"Error: \" + err));\r\n\r\n    //window.location = \"/\"; don't refresh the page before the request is finish....\r\n  };\r\n\r\n  return (\r\n    <div className=\"limiter\">\r\n      <div className=\"container-login100\">\r\n        <div className=\"wrap-login100\">\r\n          <form\r\n            onSubmit={handleSubmit(onSubmit)}\r\n            className=\"login100-form validate-form\"\r\n          >\r\n            <span className=\"login100-form-logo\">\r\n              <img className=\"img\" src={Logo} />\r\n            </span>\r\n\r\n            <span className=\"login100-form-title p-b-34 p-t-27\">Register</span>\r\n\r\n            <div\r\n              className=\"wrap-input100 validate-input\"\r\n              data-validate=\"Enter ID\"\r\n            >\r\n              <input\r\n                className=\"input100\"\r\n                type=\"text\"\r\n                name=\"userID\"\r\n                ref={register}\r\n                placeholder=\"ID\"\r\n              />\r\n              <span\r\n                className=\"focus-input100\"\r\n                data-placeholder=\"&#xf207;\"\r\n              ></span>\r\n            </div>\r\n\r\n            <div\r\n              className=\"wrap-input100 validate-input\"\r\n              data-validate=\"Enter password\"\r\n            >\r\n              <input\r\n                className=\"input100\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                ref={register}\r\n                placeholder=\"Password\"\r\n              />\r\n              <span\r\n                className=\"focus-input100\"\r\n                data-placeholder=\"&#xf191;\"\r\n              ></span>\r\n            </div>\r\n\r\n            <div\r\n              className=\"wrap-input100 validate-input\"\r\n              data-validate=\"Confirm password\"\r\n            >\r\n              <input\r\n                className=\"input100\"\r\n                type=\"password\"\r\n                name=\"confirmPassword\"\r\n                ref={register}\r\n                placeholder=\"Confirm password\"\r\n              />\r\n              <span\r\n                className=\"focus-input100\"\r\n                data-placeholder=\"&#xf191;\"\r\n              ></span>\r\n            </div>\r\n\r\n            <div className=\"contact100-form-checkbox\">\r\n              <input\r\n                className=\"input-checkbox100\"\r\n                id=\"ckb1\"\r\n                type=\"checkbox\"\r\n                name=\"remember-me\"\r\n              />\r\n              <label\r\n                className=\"label-checkbox100\" //for=\"ckb1\"\r\n              >\r\n                Remember me\r\n              </label>\r\n            </div>\r\n\r\n            <div className=\"container-login100-form-btn\">\r\n              <button className=\"login100-form-btn\">Signup</button>\r\n            </div>\r\n\r\n            <div className=\"text-center p-t-90\">\r\n              <Link className=\"txt1\" to=\"/\">\r\n                Have an account!? Log in now!\r\n              </Link>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\from ssd\\GitHub\\TrainingApp\\src\\Components\\Login.tsx",["71","72"],"import React from \"react\";\r\nimport Logo from \"../img/IUSlogo2.png\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link } from \"react-router-dom\";\r\n// import { useQuery, QueryCache, ReactQueryCacheProvider } from 'react-query';\r\nimport axios from \"axios\";\r\nimport Cookie from \"js-cookie\";\r\n\r\nimport \"../css/custom.css\";\r\nimport \"../css/main.css\";\r\nimport \"../css/util.css\";\r\n\r\ninterface LoginProps {\r\n  userID?: string;\r\n  password?: string;\r\n  isAdmin?: boolean;\r\n}\r\n\r\nexport const Login: React.FC<LoginProps> = ({}) => {\r\n  const { register, handleSubmit } = useForm<LoginProps>();\r\n\r\n  const onSubmit = (data: LoginProps) => {\r\n    const user = {\r\n      userID: data.userID,\r\n      password: data.password,\r\n    };\r\n\r\n    axios\r\n      .post(\"http://localhost:5000/users/login\", user)\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        Cookie.set(\"token\", res.data.token);\r\n        Cookie.set(\"userId\", res.data.userId);\r\n        Cookie.set(\"name\", res.data.name);\r\n        Cookie.set(\"surname\", res.data.surname);\r\n\r\n        data.isAdmin = res.data.isAdmin;\r\n\r\n        if (data.isAdmin) {\r\n          //needs testing\r\n          window.location.href = \"/AdminHome\";\r\n        } else {\r\n          //Return to the user list\r\n          window.location.href = \"/Home\";\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        Cookie.remove(\"token\");\r\n        Cookie.remove(\"userId\");\r\n\r\n        alert(\"Error: \" + err);\r\n      });\r\n  };\r\n\r\n  //  isLogin() {\r\n  //    if (!Cookie.get(\"token\")) return false;\r\n  //    else return Cookie.get(\"token\") !== \"\" && Cookie.get(\"userId\") !== \"\";\r\n  //  }\r\n\r\n  return (\r\n    <div className=\"limiter\">\r\n      <div className=\"container-login100\">\r\n        <div className=\"wrap-login100\">\r\n          <form\r\n            onSubmit={handleSubmit(onSubmit)}\r\n            className=\"login100-form validate-form\"\r\n          >\r\n            <span className=\"login100-form-logo\">\r\n              <img className=\"img\" src={Logo} />\r\n            </span>\r\n\r\n            <span className=\"login100-form-title p-b-34 p-t-27\">Log in</span>\r\n\r\n            <div\r\n              className=\"wrap-input100 validate-input\"\r\n              data-validate=\"Enter ID\"\r\n            >\r\n              <input\r\n                className=\"input100\"\r\n                type=\"text\"\r\n                name=\"userID\"\r\n                ref={register}\r\n                placeholder=\"ID\"\r\n              />\r\n              <span\r\n                className=\"focus-input100\"\r\n                data-placeholder=\"&#xf207;\"\r\n              ></span>\r\n            </div>\r\n\r\n            <div\r\n              className=\"wrap-input100 validate-input\"\r\n              data-validate=\"Enter password\"\r\n            >\r\n              <input\r\n                className=\"input100\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                ref={register}\r\n                placeholder=\"Password\"\r\n              />\r\n              <span\r\n                className=\"focus-input100\"\r\n                data-placeholder=\"&#xf191;\"\r\n              ></span>\r\n            </div>\r\n\r\n            <div className=\"contact100-form-checkbox\">\r\n              <input\r\n                className=\"input-checkbox100\"\r\n                id=\"ckb1\"\r\n                type=\"checkbox\"\r\n                name=\"remember-me\"\r\n              />\r\n              <label\r\n                className=\"label-checkbox100\" //for=\"ckb1\"\r\n              >\r\n                Remember me\r\n              </label>\r\n            </div>\r\n\r\n            <div className=\"container-login100-form-btn\">\r\n              <button className=\"login100-form-btn\">Login</button>\r\n            </div>\r\n\r\n            <div className=\"text-center p-t-90\">\r\n              <Link className=\"txt1\" to=\"/register\">\r\n                Don't have an account!? Register!\r\n              </Link>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <div id=\"dropDownSelect1\"></div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\from ssd\\GitHub\\TrainingApp\\src\\Components\\AllCoursesTable.tsx",["73","74","75","76"],"D:\\from ssd\\GitHub\\TrainingApp\\src\\Views\\MyCourses.tsx",[],"D:\\from ssd\\GitHub\\TrainingApp\\src\\Views\\AllCourses.tsx",[],"D:\\from ssd\\GitHub\\TrainingApp\\src\\Views\\Home.tsx",["77"],"import React, { useState } from \"react\";\r\nimport Bar from \"../Components/Bar\";\r\nimport Drawer from \"../Components/Drawer\";\r\nimport Welcome from \"../Components/Welcome\";\r\n\r\nimport \"../css/App.css\";\r\n\r\ninterface HomeProps {\r\n  setMobileOpen: Function;\r\n  mobileOpen: boolean;\r\n}\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  if (width < 800) {\r\n    return true;\r\n  } else return false;\r\n}\r\n\r\nexport const Home: React.FC<HomeProps> = (props) => {\r\n  const [isMobile, setisMobile] = useState(false);\r\n  window.addEventListener(\"resize\", () => {\r\n    setisMobile(getWindowDimensions);\r\n  });\r\n  return (\r\n    <div className=\"panelDiv\">\r\n      <Drawer\r\n        mobileOpenFunction={props.setMobileOpen}\r\n        mobileOpen={props.mobileOpen}\r\n      />\r\n      <main className=\"main\">\r\n        <div className=\"homeDiv\">\r\n          {isMobile ? (\r\n            <Bar\r\n              setMobileOpen={props.setMobileOpen}\r\n              mobileOpen={props.mobileOpen}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <Welcome />\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n","D:\\from ssd\\GitHub\\TrainingApp\\src\\Components\\Welcome.tsx",[],"D:\\from ssd\\GitHub\\TrainingApp\\src\\Components\\FetchAllCourses.tsx",["78","79"],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":25},{"ruleId":"84","severity":1,"message":"88","line":11,"column":3,"nodeType":"86","messageId":"87","endLine":11,"endColumn":11},{"ruleId":"84","severity":1,"message":"89","line":24,"column":10,"nodeType":"86","messageId":"87","endLine":24,"endColumn":18},{"ruleId":"90","severity":1,"message":"91","line":108,"column":11,"nodeType":"92","endLine":108,"endColumn":45},{"ruleId":"84","severity":1,"message":"85","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":25},{"ruleId":"84","severity":1,"message":"93","line":2,"column":8,"nodeType":"86","messageId":"87","endLine":2,"endColumn":18},{"ruleId":"94","severity":1,"message":"95","line":18,"column":51,"nodeType":"96","messageId":"97","endLine":18,"endColumn":53},{"ruleId":"90","severity":1,"message":"91","line":55,"column":15,"nodeType":"92","endLine":55,"endColumn":49},{"ruleId":"94","severity":1,"message":"95","line":19,"column":45,"nodeType":"96","messageId":"97","endLine":19,"endColumn":47},{"ruleId":"90","severity":1,"message":"91","line":69,"column":15,"nodeType":"92","endLine":69,"endColumn":49},{"ruleId":"84","severity":1,"message":"85","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":25},{"ruleId":"84","severity":1,"message":"98","line":2,"column":8,"nodeType":"86","messageId":"87","endLine":2,"endColumn":13},{"ruleId":"84","severity":1,"message":"99","line":3,"column":8,"nodeType":"86","messageId":"87","endLine":3,"endColumn":14},{"ruleId":"84","severity":1,"message":"100","line":4,"column":23,"nodeType":"86","messageId":"87","endLine":4,"endColumn":31},{"ruleId":"84","severity":1,"message":"101","line":14,"column":43,"nodeType":"86","messageId":"87","endLine":14,"endColumn":49},{"ruleId":"84","severity":1,"message":"102","line":1,"column":8,"nodeType":"86","messageId":"87","endLine":1,"endColumn":13},{"ruleId":"84","severity":1,"message":"98","line":2,"column":8,"nodeType":"86","messageId":"87","endLine":2,"endColumn":13},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useTheme' is defined but never used.","'Redirect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Typography' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'axios' is defined but never used.","'Cookie' is defined but never used.","'useQuery' is defined but never used.","'height' is assigned a value but never used.","'React' is defined but never used.","no-global-assign","no-unsafe-negation"]